#!/bin/sh

set -e
# set -x

# Make sure pyenv and pyenv-virtualenv is setup.
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

venv_options=
while [ "${1#-}" != "$1" ]; do
  venv_options="$venv_options $1"
  shift
done

if [ -n "$1" ]; then
  pyenv_version="$1"
else
  pyenv_version=$(pyenv version-name | sed 's/:.*//')
fi
if [ -n "$2" ]; then
  venv_name="$2"
else
  # Use -u (short for --dry-run) for compatibility (MacOS).
  venv_name=$(mktemp -u -d "tmp-${pyenv_version}-${PWD##*/}-XXXXXX")
fi

# shellcheck disable=SC2086
pyenv virtualenv $venv_options "${pyenv_version}" "${venv_name}"

echo
echo "Entering a new shell session with virtualenv '${venv_name}' (${pyenv_version})."
echo "It will be removed when exiting (ctrl+d or 'exit')."
echo "NOTE: to keep it just rename/move it while still in there."

# export PYENV_DEBUG=1
pyenv activate --force "$venv_name"
# NOTE: the shell will return the exit code from the last command, which might
# have failed.
$SHELL || true

echo "Destroying temporary virtualenv '${venv_name}'."
pyenv uninstall -f "${venv_name}"

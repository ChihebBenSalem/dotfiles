#!/bin/sh
# A wrapper around xprop to easily get class, name and other useful properties
# of windows.  Has support for awesomeWM, if awesome-client is installed.

# First get the window id.  That's not so easy with xprop.
# (also available through ./get-xwindow-pid).
windowid=$(xwininfo -int | sed -n '/^xwininfo: Window id: / { s/xwininfo: Window id: //; s/ .*//p }')

# Get interesting props from xprop.
xprop=$(xprop -id $windowid _NET_WM_PID WM_CLASS WM_NAME WM_WINDOW_ROLE \
  WM_TRANSIENT_FOR _NET_WM_WINDOW_TYPE _NET_WM_STATE)

windowpid="$(get-xwindow-pid "$windowid")"

# Get interesting props from awesome-client.
if hash awesome-client 2>/dev/null; then
  awesome_info=$(cat <<EOF |
    local get_tag_names = function(c)
      local names={}, t
      for _,t in ipairs(c:tags()) do
        table.insert(names, t.name)
      end
      return table.concat(names, ", ")
    end
    for idx,c in ipairs(client.get()) do
      if c.window == $windowid then
        local r = ""
        for _,p in pairs({"class", "name", "instance", "border_width",
          "sticky", "ontop", "screen.index", "screen.outputs", "tags",
          "type", "border_color", "urgent", "window", "floating",
          "_implicitly_floating", "maximized", "fullscreen", "fixed",
          "transient_for", "x", "y", "height", "width"}) do
          local v
          if p == "tags" then
            v = get_tag_names(c)
          elseif p == "screen.index" then
            v = c.screen.index
          elseif p == "screen.outputs" then
            v = table.concat(c.screen.outputs, ', ')
          else
            v = c[p]
          end
          r = r .. p .. ": " .. tostring(v) .. "\n"
        end
        r = r .. "client.get idx: " .. tostring(idx) .. "\n"
        return "\n" .. r .. "\n"
      end
    end
EOF
awesome-client | sed '1d; $d')
fi

text="winid: $windowid
---
$xprop
---
$awesome_info"

if [ -n "$windowpid" ]; then
  text="$text
---
pstree: $(pstree -aphus $windowpid)"
fi

zenity --info --no-markup --text "$text"

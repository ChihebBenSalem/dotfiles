#!/usr/bin/zsh -f
#
# Shorten path according to hashed dir list ('hash -d' in Zsh),
# maintained in ~/.dotfiles/oh-my-zsh/lib/hash_dirs.
# This also replaces $HOME with ~.
#
# This is used from vimrc for ShortenPath.
#
# TODO: relative to $cdpath?!  (see also vim-flagship by tpope)

# Plain sh would be ~4x faster on startup, but with cat/sed etc similar slow/fast,
# and needs a cache file.

# Self-tests: run with '--test'. {{{
if [ x$1 = 'x--test' ]; then
  hash -d df=~/.dotfiles

  set -x -e

  [[ $(shorten_path .) == '' ]]

  cd ~
  [[ $(shorten_path .dotfiles/vimrc) == '~df/vimrc' ]]
  [[ $(shorten_path -a .vimrc) == '↬.vimrc' ]]

  cd .dotfiles
  [[ $(shorten_path ~/.dotfiles/vimrc) == 'vimrc' ]]
  [[ $(shorten_path vimrc) == 'vimrc' ]]
  [[ $(shorten_path ../.dotfiles/vimrc) == 'vimrc' ]]

  [[ $(shorten_path ~/.dotfiles/foo/bar) == 'foo/bar' ]]
  [[ $(shorten_path foo/bar) == 'foo/bar' ]]
  [[ $(shorten_path ../.dotfiles/foo/bar) == 'foo/bar' ]]
  [[ $(shorten_path -a ../.dotfiles/foo/bar) == 'foo/bar' ]]

  # With "base" dir.
  cd ~
  [[ $(shorten_path .dotfiles/vimrc $PWD) == '~df/vimrc' ]]
  [[ $(shorten_path vimrc .dotfiles) == 'vimrc' ]]
  [[ $(shorten_path ~/.dotfiles/vimrc /) == '~df/vimrc' ]]
  [[ $(shorten_path -a ~/.dotfiles/vimrc /) == '~df/vimrc' ]]

  cd .dotfiles
  [[ $(shorten_path ../.vimrc) == '../.vimrc' ]]
  [[ $(shorten_path ../non-existent) == '../non-existent' ]]

  # Tests in temp dir.
  tmpdir="$(mktemp -d)"
  trap 'test -d "$tmpdir" && rm -rf "$tmpdir"' 0
  cd $tmpdir
  touch foo
  ln -s foo bar
  [[ $(shorten_path -a foo) == 'foo' ]]
  [[ $(shorten_path -a bar) == '↬bar' ]]
  [[ $(shorten_path -a $tmpdir) == "" ]]
  [[ $(shorten_path -a . /) == "" ]]
  [[ $(shorten_path -a $tmpdir /) == "$tmpdir" ]]
  [[ $(shorten_path -a $tmpdir/bar ~) == "$tmpdir/↬bar" ]]

  # Canonical path (removing empty segments).
  [[ $(shorten_path .dotfiles//vimrc ~) == '~df/vimrc' ]]
  [[ $(shorten_path -a $tmpdir//bar ~) == "$tmpdir/↬bar" ]]
  [[ $(shorten_path -a ./bar) == '↬bar' ]]

  set +x
  time ( for i in {1..200}; do shorten_path foo; done )
  exit
fi
# }}}

if [ -z "$1" ]; then
  echo "Argument (path) required." >&2
  exit 1
fi

if [ x"$1" = "x-a" ]; then
  annotate=1; shift
else
  annotate=0
fi

path="$1"
if [ -n "$2" ]; then
  cd "$2" || exit
fi
abs_path=${path:a}
if [[ "$abs_path" == "$PWD" ]]; then
  return
fi

# Keep relative dirs, which are not going back to below base/$PWD.
if [[ $path = ../* ]] && [[ $abs_path != $PWD/* ]]; then
  printf $path
  return
fi

test -f ~/.dotfiles/oh-my-zsh/lib/hash_dirs.zsh && \
  source ~/.dotfiles/oh-my-zsh/lib/hash_dirs.zsh
test -f ~/.dotfiles/oh-my-zsh/lib/hash_dirs.local.zsh && \
  source ~/.dotfiles/oh-my-zsh/lib/hash_dirs.local.zsh

pwd_short=${(D)PWD}/
# NOTE: "(Q)" is required to remove escaping of e.g. "[" from the name.
path_short=${(Q)${(D)abs_path}#$pwd_short}
if [ "$annotate" = 1 ]; then
  # Annotate symlinks.
  path=
  for i in "${(s:/:)path_short}"; do
    if [[ -z "$i" ]]; then
      if [[ -z "$path" ]]; then
        path="/"
      fi
      continue
    fi
    if [[ -n "$path" ]]; then
      if [[ "$path" != "/" ]]; then
        path="$path/"
      fi
      printf "/"
    fi
    path="$path$i"
    if [[ -h $~path ]]; then
      printf "↬$i"
    else
      printf "$i"
    fi
  done
else
  printf "$path_short"
fi

#!/usr/bin/env bash

# NOTE: there is git --autostash now..
#
# Source: http://jasoncodes.com/posts/gup-git-rebase

set -e
# set -x

# use `git-up` if installed
# (probably: https://github.com/aanand/git-up)
# if type git-up > /dev/null 2>&1
# then
#   exec git-up
# fi

# fetch upstream changes
git fetch

# BRANCH=$(git describe --contains --all HEAD)
BRANCH=$(git symbolic-ref -q HEAD)
BRANCH=${BRANCH##refs/heads/}
BRANCH=${BRANCH:-HEAD}
if [ -z "$(git config branch.$BRANCH.remote)" -o -z "$(git config branch.$BRANCH.merge)" ]
then
  echo "\"$BRANCH\" is not a tracking branch." >&2
  exit 1
fi

# create a temp file for capturing command output
TEMPFILE="`mktemp -t gup.XXXXXX`"
trap '{ rm -f "$TEMPFILE"; }' EXIT

# if we're behind upstream, we need to update
if git status | grep -P "^(# )?Your branch" > "$TEMPFILE"
then

  # extract tracking branch from message
  UPSTREAM=$(cat "$TEMPFILE" | cut -d "'" -f 2)
  if [ -z "$UPSTREAM" ]
  then
    echo Could not detect upstream branch >&2
    exit 1
  fi

  # can we fast-forward?
  CAN_FF=1
  grep -q "can be fast-forwarded" "$TEMPFILE" || CAN_FF=0

  # stash any uncommitted changes
  git stash save "Automatic stash by gup on $(date +'%F %T')." | tee "$TEMPFILE"
  [ "${PIPESTATUS[0]}" -eq 0 ] || exit 1

  # take note if anything was stashed
  HAVE_STASH=0
  grep -q "No local changes" "$TEMPFILE" || HAVE_STASH=1

  if [ "$CAN_FF" -ne 0 ]
  then
    # if nothing has changed locally, just fast foward.
    git merge --ff "$UPSTREAM"
  else
    # rebase our changes on top of upstream, but keep any merges
    git rebase -p "$UPSTREAM"
  fi

  # restore any stashed changes
  if [ "$HAVE_STASH" -ne 0 ]
  then
    echo "Popping stashed changes.."
    git stash pop
  fi

fi


#!/bin/sh
#
# Change X/xrdb theme between light/dark (solarized).
#
# This script's output is meant to be eval'd.
# It is used from my Zsh theme and in ~/.xsessionrc.
# See the theme_variant function for a wrapper arount it.
#
# $1: theme to use: auto/light/dark.
# $2: "save" to save the value to the config file.
#
# MY_X_THEME_VARIANT: set to the effective variant: "light" or "dark".
#
# TODO: query urxvt's current bg and use it for dircolors.
#       see ~/bin/query-urxvt and ~/bin/xterm-bg.

X_THEME_VARIANT_CONFIG_FILE=~/.config/x-theme-variant

# set -x
# date >>/tmp/debug-sh-setup-x-theme.log
# exec 2>>/tmp/debug-sh-setup-x-theme.log

debug() {
  if [ -n "$DEBUG" ]; then
    echo "$(date +%FT%T) [sh-setup-x-theme] $@" >&2
  fi
  # echo "$(date +%FT%T) [sh-setup-x-theme:$$:$(ps -o cmd= $$)] $@" >> /tmp/debug-sh-setup-x-theme.log
}

variant_from_config() {
  if [ -f $X_THEME_VARIANT_CONFIG_FILE ]; then
    variant=$(cat $X_THEME_VARIANT_CONFIG_FILE)
    debug "variant from cfg: $variant"
  else
    debug "Config file ($X_THEME_VARIANT_CONFIG_FILE) does not exist."
  fi
  if [ -z "$variant" ]; then
      variant=auto
      debug "variant from fallback: $variant"
  fi
  echo "$variant"
}

# Init once and export the value.
# This gets used in Vim to auto-set the background, too.

# Handle options, in this case it does not / should not get sourced.
while [ "${1#-*}" != "$1" ]; do
  case "$1" in
    -d ) DEBUG=1 ;;
    -f ) FORCE=1 ;;
    -s ) SHELL_ONLY=1 ;;
    -q ) # Query/info.
      echo "Current theme variant: MY_X_THEME_VARIANT=$MY_X_THEME_VARIANT."
      echo "BASE16_THEME: $BASE16_THEME."
      echo "Theme in config: $(variant_from_config)."
      echo "Use 'auto', 'dark' or 'light' to change it."
      exit
      ;;
    *) echo "Unknown option: $1"; exit 1; ;;
  esac
  shift
done

debug "RUN: $0 $@"
variant=$1
debug "Requested variant: $variant"

# No argument provided: read config/env.
if [ -z "$variant" ]; then
  variant=$(variant_from_config)

else
  FORCE=1
  debug "(forced) variant from arg: $variant"

  if [ "$SHELL_ONLY" != 1 ]; then
    # Save given value.
    case $variant in
      auto)
        if [ -f "$X_THEME_VARIANT_CONFIG_FILE" ]; then
          rm "$X_THEME_VARIANT_CONFIG_FILE"
        fi
        ;;
      light|dark)
        echo $1 > "$X_THEME_VARIANT_CONFIG_FILE"
        echo "Saved variant=$1." >&2 ;;
      * ) echo "Invalid variant: $variant" >&2; exit 64
    esac
  fi
fi

# Get auto-theme from get-daytime-period for "auto",
# and validate value.
case $variant in
  auto)
    dt_period="$(~/.dotfiles/usr/bin/get-daytime-period)"
    if [ "$dt_period" = 'Daytime' ]; then
      variant=light
    elif [ -n "$dt_period" ]; then
      variant=dark
    else
      echo "get-daytime-period failed.  Using 'dark' variant." >&2
      variant=dark
    fi
    debug "=> variant: $variant"
    ;;
  light|dark ) ;;
  * ) echo "Invalid variant: $variant" >&2; exit 64
esac


# curbg="$(xrdb -query|sed -n -e '/^\*background:/ {p;q}' | tr -d '[:space:]' | cut -f2 -d:)"
# if [[ $curbg == '#fdf6e3' ]]; then
#   if [[ $variant == "dark" ]]; then
#     # xrdb -DSOLARIZED_DARK ~/.Xresources
#     xrdb -merge ~/.dotfiles/lib/solarized-xresources/Xresources.dark
#     changed_xrdb=1
#   fi
# elif [[ $variant == "light" ]]; then
#   # xrdb -DSOLARIZED_LIGHT ~/.Xresources
#   xrdb -merge ~/.dotfiles/lib/solarized-xresources/Xresources.light
#   changed_xrdb=1
# fi


if [ -n "$DISPLAY" ] && [ "$USER" != "root" ] && [ "$SHELL_ONLY" != 1 ] \
  && hash xrdb 2>/dev/null; then
  # Query "mythemevariant" resource, used to hold the current state.
  # Unset by default in ~/.Xresources.
  cur_xrdb_theme="$(xrdb -query|sed -n -E -e '/mythemevariant:\t/ {s/.*:\t//p;q}')"
  debug "cur_xrdb_theme=$cur_xrdb_theme"
  if [ "$FORCE" = 1 ] || [ "$cur_xrdb_theme" != "$variant" ]; then
    if [ "$variant" = dark ]; then
      xrdb -DSOLARIZED_DARK -I$HOME -merge ~/.Xresources

      # Send escape codes for urxvt to change colors.
      if [ "${TERM#rxvt}" != "$TERM" ] || [ "${COLORTERM#rxvt}" != "$COLORTERM" ]; then
        # XXX: does not work on first "try".
        # [ -n "$TMUX" ] && echo "printf '\033Ptmux;\033'"
        echo "printf '\033]11;#002b36\007\033]10;#839496\007\033]12;#93a1a1\007\033]13;#93a1a1\007\033]708;#002b36\007'"
        # [ -n "$TMUX" ] && echo "printf '\033\\'"
      fi
    elif [ "$variant" = light ]; then
      xrdb -DSOLARIZED_LIGHT -I$HOME -merge ~/.Xresources

      # Send escape codes for urxvt to change colors.
      if [ "${TERM#rxvt}" != "$TERM" ] || [ "${COLORTERM#rxvt}" != "$COLORTERM" ]; then
        # XXX: does not work on first "try".
        # [ -n "$TMUX" ] && echo "printf '\033Ptmux;\033'"
        echo "printf '\033]11;#fdf6e3\007\033]10;#657b83\007\033]12;#586e75\007\033]13;#586e75\007\033]708;#fdf6e3\007'"
        # [ -n "$TMUX" ] && echo "printf '\033\\'"
      fi
    fi

    echo "mythemevariant: $variant" | xrdb -merge
    echo "Changed X/xrdb theme variant to $variant." >&2
  fi
fi

if [ "$variant" = "light" ]; then
  DIRCOLORS_FILE=~/.dotfiles/lib/dircolors-solarized/dircolors.ansi-light
else
  # DIRCOLORS_FILE=~/.dotfiles/lib/dircolors-solarized/dircolors.ansi-dark
  # Prefer LS_COLORS repo, which is more fine-grained, but does not look good on light bg.
  DIRCOLORS_FILE=~/.dotfiles/lib/LS_COLORS/LS_COLORS
fi

# Setup dircolors once.
if [ "$FORCE" = 1 ] || [ "$DIRCOLORS_SETUP" != "$DIRCOLORS_FILE" ]; then
  debug "Setting up DIRCOLORS_FILE=$DIRCOLORS_FILE"
  debug "DIRCOLORS_SETUP=$DIRCOLORS_SETUP"
  if [ -n "$DIRCOLORS_SETUP" ]; then
    debug "Adjusting dircolors for variant=$variant."
  else
    debug "TODO: dircolors only during .xresources ($(basename $0))."
  fi

  # debug "running: dircolors -b $DIRCOLORS_FILE"
  echo "$(dircolors -b $DIRCOLORS_FILE);"
  echo "export DIRCOLORS_SETUP=$DIRCOLORS_FILE;"
fi

# Used in ~/.vimrc.
echo "export MY_X_THEME_VARIANT=$variant;"

# Update tmux env.
if [ -n "$TMUX" ] && [ "$SHELL_ONLY" != 1 ]; then
  debug "Updating tmux env.."
  COLORS=$(tput colors)
  debug "Colors: $COLORS"
  if [ "$COLORS" -lt 16 ]; then
    debug "SKIP: not enough colors ($COLORS are available (via 'tput colors'); TERM=$TERM)."

  elif [ -n "$_tmux_conf" ] \
      && [ "$(tmux show-env MY_X_THEME_VARIANT 2>/dev/null)" != "MY_X_THEME_VARIANT=$variant" ]; then
    echo "tmux set-environment MY_X_THEME_VARIANT $variant \; \
      source-file $_tmux_conf \; \
      display 'Reloaded tmux for $variant theme variant.'"
  fi
fi

if [ "$MY_X_THEME_VARIANT" != "$variant" ] \
  || [ "${BASE16_THEME##*.}" != "$variant" ]; then
  # Setup base16-shell.
  if [ "${TERM%%-*}" = 'linux' ]; then
    echo "Skipping base16-shell with TERM=linux." >&2
  else
    BASE16_SHELL_DIR=~/.dotfiles/lib/base16/base16-shell
    if [ -d "$BASE16_SHELL_DIR" ]; then
      echo "export BASE16_THEME=solarized.$variant"
      base16_scheme_file=$BASE16_SHELL_DIR/base16-solarized.${variant}.sh
      [ -s $base16_scheme_file ] && echo "source $base16_scheme_file" || {
        echo "$base16_scheme_file does not exist." >&2
      }
    fi

    if [ -n "$MY_X_THEME_VARIANT" ]; then
      # Reload ZSH theme conditionally.
      echo "sh-setup-x-theme: reloading zsh.." >&2
      echo "command -v reloadzsh > /dev/null && reloadzsh"
    fi

    if hash fzf >/dev/null; then
      if [ -z "$_FZF_DEFAULT_OPTS_BASE" ]; then
        echo 'export _FZF_DEFAULT_OPTS_BASE=$FZF_DEFAULT_OPTS'
      fi
      if [ $variant = "light" ]; then
        echo "export FZF_DEFAULT_OPTS='$_FZF_DEFAULT_OPTS_BASE --color 16,bg+:21'"
      else
        echo "export FZF_DEFAULT_OPTS='$_FZF_DEFAULT_OPTS_BASE --color 16,bg+:18'"
      fi
    fi
  fi
fi

    # # Setup/change xrdb / gnome-terminal profile. {{{
    # if [[ "$MY_X_THEME_VARIANT" != "$variant" ]]; then
    #     if [[ -n $commands[xrdb] ]]; then
    #         local curbg changed_xrdb
    #         cur_xrdb_theme="$(xrdb -query|sed -n -E -e '/mythemevariant:\t/ {s/.*:\t//p;q}')"
    #
    #         if [[ $cur_xrdb_theme != $variant ]]; then
    #             if [[ $variant == dark ]]; then
    #                 xrdb -DSOLARIZED_DARK ~/.Xresources
    #             else
    #                 xrdb -DSOLARIZED_LIGHT ~/.Xresources
    #             fi
    #         fi
    #         # curbg="$(xrdb -query|sed -n -e '/^\*background:/ {p;q}' | tr -d '[:space:]' | cut -f2 -d:)"
    #         # if [[ $curbg == '#fdf6e3' ]]; then
    #         #     if [[ $variant == "dark" ]]; then
    #         #         # xrdb -DSOLARIZED_DARK ~/.Xresources
    #         #         xrdb -merge ~/.dotfiles/lib/solarized-xresources/Xresources.dark
    #         #         changed_xrdb=1
    #         #     fi
    #         # elif [[ $variant == "light" ]]; then
    #         #     # xrdb -DSOLARIZED_LIGHT ~/.Xresources
    #         #     xrdb -merge ~/.dotfiles/lib/solarized-xresources/Xresources.light
    #         #     changed_xrdb=1
    #         # fi
    #
    #         if [[ $changed_xrdb == 1 ]]; then
    #             echo "Changed xrdb theme to $variant (curbg: $curbg; variant=$variant)."
    #         fi
    #     fi
    #     if is_gnome_terminal; then
    #         local wanted_gnome_terminal_profile="Solarized-$variant"
    #         # local id_light=e6e34acf-124a-43bd-ad32-46fb0765ad76
    #         # local id_dark=b1dcc9dd-5262-4d8d-a863-c897e6d979b9
    #
    #         local default_profile_id=${$(dconf read /org/gnome/terminal/legacy/profiles:/default)//\'/}
    #         # echo "default_profile_id:$default_profile_id"
    #         local default_profile_name=${$(dconf read /org/gnome/terminal/legacy/profiles:/":"$default_profile_id/visible-name)//\'/}
    #         # echo "default_profile_name:$default_profile_name"
    #
    #         # local -h cur_profile=$(gconftool-2 --get /apps/gnome-terminal/global/default_profile)
    #         if [[ $default_profile_name != $wanted_gnome_terminal_profile ]]; then
    #             # Get ID of wanted profile.
    #
    #             wanted_gnome_terminal_profile_id=$(
    #                 dconf dump "/org/gnome/terminal/legacy/profiles:/" \
    #                 | grep -P "^(visible-name='$wanted_gnome_terminal_profile'|\[:)" \
    #                 | grep '^visible-name' -B1 | head -n1 \
    #                 | sed -e 's/^\[://' -e 's/]$//')
    #
    #             echo "Changing gnome-terminal default profile to: $wanted_gnome_terminal_profile ($wanted_gnome_terminal_profile_id)."
    #             # gconftool-2 --set --type string /apps/gnome-terminal/global/default_profile $gnome_terminal_profile
    #             dconf write /org/gnome/terminal/legacy/profiles:/default "'$wanted_gnome_terminal_profile_id'"
    #         fi
    #     fi
    # fi  # }}}

    # Could adjust current urxvt; but this can be done using ctrl-alt-9/0.
    # # URxvt.keysym.M-C-0: command:\033]11;S_base3\007\033]10;S_base00\007\033]12;S_base01\007\033]13;S_base01\007\033]708;S_base3\007
    # # URxvt.keysym.M-C-9: command:\033]11;S_base03\007\033]10;S_base0\007\033]12;S_base1\007\033]13;S_base1\007\033]708;S_base03\007
    # my-send-term-escape '\e]11; \007'

    # my-send-term-escape() {
    #     # Wrap escape code for tmux.
    #     [[ -n $TMUX ]] && printf '\ePtmux;\e'
    #
    #     echo -ne $1
    #
    #     # End escape code wrapping for tmux.
    #     [[ -n $TMUX ]] && printf '\e\\'
    # }


# # Init once and export the value.
# # This gets used in Vim to auto-set the background, too.
# if [ -z "$MY_X_THEME_VARIANT" ]; then
#     if [ -f "$X_THEME_VARIANT_CONFIG_FILE" ]; then
#         MY_X_THEME_VARIANT=$(<$X_THEME_VARIANT_CONFIG_FILE)
#     else
#         MY_X_THEME_VARIANT=auto
#     fi
#     theme_variant $MY_X_THEME_VARIANT
# fi

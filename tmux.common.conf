# This file holds common settings between tmux and byobu-tmux.
# It gets sourced by ~/.tmux.conf and ~/.byobu/.tmux.conf.
#
# TODO: select windows using alt-NR

# tmux always sets TERM=screen, which results in 8/16 colors (`tput colors`,
# `&t_Co` in Vim).
# NOTE: defining this on tmux startup is problematic (when attaching from/to
#       TERM=linux). Gets done in ~/.zshrc.
# set -g default-terminal "screen-256color"

# Use xterm keycodes for Shift-F1 etc (for Vim).
set-window-option -g xterm-keys on

# Disable terminal capabilities for alternate screen, to make is scrollable in
# the outer terminal emulator (via S-PageUp/S-PageDown).
# Enable S-PageUp/S-PageDown.
# (see byobu bug https://bugs.launchpad.net/byobu/+bug/1258537 and
#  http://superuser.com/a/326592/30216)
# NOTE: disabled, because it fails to restore the screen after "attach", when tmux exists
# ("make test" in vim-diminactive).
# set -ga terminal-overrides ",xterm*:smcup@:rmcup@"

# Setup defaults from xterm* also for urxvt (minus Ms for set-selection).
# Asked about this on the mailing list (rejected): https://sourceforge.net/p/tmux/mailman/message/33169870/
set -ga terminal-overrides ",rxvt*:XT:Cs=\\E]12;%p1%s\\007:Cr=\\E]112\\007:Ss=\\E[%p1%d q:Se=\\E[2 q"

# Mouse support.
# mode-mouse: on allows scrolling, but requires Shift for X-selection (copy-mode does not).
set -g mode-mouse off
set -g mouse-resize-pane off
set -g mouse-select-pane off
set -g mouse-select-window off
set -g mouse-utf8 on

# Toggle mouse mode.
bind m \
    set -g mode-mouse on \;\
    set -g mouse-resize-pane on \;\
    set -g mouse-select-pane on \;\
    set -g mouse-select-window on \;\
    display 'Mouse: ON'
bind M \
    set -g mode-mouse off \;\
    set -g mouse-resize-pane off \;\
    set -g mouse-select-pane off \;\
    set -g mouse-select-window off \;\
    display 'Mouse: OFF'

# via http://robots.thoughtbot.com/post/2641409235/a-tmux-crash-course
# Use C-a and ^ as prefixes.
unbind C-b
set -g prefix C-a
set -g prefix2 ^
bind ^ send-prefix -2
# bind C-a send-prefix
# bind C-A send-prefix \; send-prefix

# send prefix to tmux in tmux
bind a send-prefix
bind -n C-^ send-prefix

# easy reloading of config
bind R source-file ~/.tmux.conf \; display "Reloaded!"

bind C-a last-window
bind -r Tab select-pane -t :.+
bind -r S-Tab select-pane -t :.-

# via http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
unbind [
bind Escape copy-mode
# unbind p
bind P paste-buffer
bind-key -t vi-copy 'v' begin-selection
# Yank to tmux buffer and X11 selection.
bind-key -t vi-copy 'y' copy-pipe "xsel -i --primary"
# tmux buffer <-> clipboard interaction
bind C-c run "tmux show-buffer | xsel -i --clipboard" \; display 'Copied..'
bind C-v run "tmux set-buffer -- \"$(xsel -o --clipboard)\"; tmux paste-buffer"


set-option -g display-time 4000
set-option -g display-panes-time 4000
# time for repeating of a hotkey bound using the -r flag without having to type the prefix again; default: 500
set-option -g repeat-time 1000

# Resize the window to the size of the smallest session for which it is the
# current window, rather than the smallest session to which it is attached.
set-window-option -g aggressive-resize on

set -g history-limit 10000

# Terminal emulator window title
set -g set-titles on
# Use hostname (@#h) in set-titles-string with SSH.
if-shell 'test -n "$SSH_CLIENT"' 'set -g set-titles-string "[tmux: #S:#I.#P @#h] #T"' 'set -g set-titles-string "[tmux: #S:#I.#P] #T"'

# Config for vim-like movements; based on https://github.com/sdball/dotfiles/blob/master/.tmux.conf
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Switch panes with Alt-Left/Right/Up/Down
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# do not allow for repeating (-r, default; distracts with shell history)
bind-key Up select-pane -U

# vim movement keys for switching windows
bind -r C-H select-window -t :-
bind -r C-L select-window -t :+

# use 1 as base for windows/panes
set -g base-index 1
set -g pane-base-index 1

# select windows via Alt-NR
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9
bind -n M-0 select-window -t :0

# select panes using Alt-Q/W/E/R/T
bind -n M-q select-pane -t :.1
bind -n M-w select-pane -t :.2
bind -n M-e select-pane -t :.3
bind -n M-r select-pane -t :.4
bind -n M-r select-pane -t :.5

# vim movement keys for resizing panes
# bind -r H resize-pane -L 5
# bind -r J resize-pane -D 5
# bind -r K resize-pane -U 5
# bind -r L resize-pane -R 5

bind  H swap-window -t -1
bind  L swap-window -t +1
bind  J swap-pane -D
bind  K swap-pane -U

# vi mode
setw -g mode-keys vi # vim movement keys for switching panes

# # enable maximizing panes
# NOTE: `resize-pane -Z` is available with tmux 1.8 (bound to "z")
# bind S-Up new-window -d -n tmp \; swap-pane -s tmp.0 \; select-window -t tmp
# bind S-Down last-window \; swap-pane -s tmp.0 \; kill-window -t tmp

# Activity Monitoring
# b/B: set/unset bell
bind b setw monitor-activity on
bind B setw monitor-activity off
set -g visual-activity on
set -g visual-content on
set -g visual-bell off  # default

# Sets urgent flag for window manager.
set -g bell-action any  # default?!
set -g bell-on-alert on

# Do not make Esc+key behave like Alt-key.
set -s escape-time 0

# Smart pane switching with awareness of vim splits
# Source: https://github.com/christoomey/vim-tmux-navigator
# See also https://github.com/christoomey/vim-tmux-navigator/pull/37.
bind -n C-h if "expr '#{pane_title}' : '^✐ .*'" 'send-keys C-h' 'select-pane -L'
bind -n C-j if "expr '#{pane_title}' : '^✐ .*'" 'send-keys C-j' 'select-pane -D'
bind -n C-k if "expr '#{pane_title}' : '^✐ .*'" 'send-keys C-k' 'select-pane -U'
bind -n C-l if "expr '#{pane_title}' : '^✐ .*'" 'send-keys C-l' 'select-pane -R'
bind -n C-\ if "expr '#{pane_title}' : '^✐ .*'" 'send-keys C-\\' 'select-pane -l'

# restore original C-l
bind C-l send-keys 'C-l'

# Powerline
# NOTE: powerline-config handles sys.path mangling.
set-environment -g POWERLINE_CONFIG_COMMAND $HOME/.dotfiles/lib/powerline/scripts/powerline-config
source ~/.dotfiles/lib/powerline/powerline/bindings/tmux/powerline.conf

# # Powerline overrides (#T):
# Default:
# set -g window-status-format "#[fg=colour244,bg=colour234]#I #[fg=colour240] #[default]#W "
# set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"

# - add #F
# - use #T (term/pane title)
set -g window-status-format "#[fg=colour244,bg=colour234]#I#F#[fg=colour240] #[default]#30T "
set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I#F #[fg=colour231,bold]#50T #[fg=colour31,bg=colour234,nobold]"

# - add #F
# - use #T (term/pane title) / #W conditionally: #W is 0 (set from Zsh by default).
# NOTE: conditionals require tmux > 1.6, gets removed in oh-my-zsh/lib/termsupport.zsh.
set -g window-status-format "#[fg=colour244,bg=colour234]#I#F#[fg=colour240] #[default]#{=50:?window_name,[#W],#T} "
set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I#F #[fg=colour231,bold]#{=80:?window_name,[#W],#T} #[fg=colour31,bg=colour234,nobold]"

# Automatic rename on by default, indicates that the window name can be set to
# 0 via zsh, and gets turned off then (via ~/.oh-my-zsh/lib/termsupport.zsh).
setw -g automatic-rename on
# Make window name "empty" (for the test in window-status-format).
# NOTE: done via zsh once per shell/window.
# rename-window 0

# tmuxstart; like tmuxinator/teamocil, but more inception-like
bind S command-prompt -p "Make/attach session:" "new-window 'tmuxstart \'%%\''"

# Disable rate-limiting which might cause not all text to get added to the
# scrollback buffer. Ref: http://sourceforge.net/p/tmux/tickets/62/
set -g c0-change-trigger 0

# Source ~/.tmux.local.conf if it exists.
if '[ -e ~/.tmux.local.conf ]' 'source ~/.tmux.local.conf'
